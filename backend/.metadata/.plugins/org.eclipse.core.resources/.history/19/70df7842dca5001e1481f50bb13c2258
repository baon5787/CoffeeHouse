package com.coffee.house.admin.auth;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.tomcat.util.net.openssl.ciphers.Authentication;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.stereotype.Service;

import com.coffee.house.admin.jwt.JwtService;
import com.coffee.house.admin.user.UserTokenRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AuthenticationServiceImp implements AuthenticationService{
	
	private final UserTokenRepository tokenRepository;

	private final JwtService jwtService;
	
	private final AuthenticationManager authenticationManager;
	
	@Override
	public String authenticate(LoginForm loginForm, HttpServletResponse response) {
		Authentication authentication = authenticationManager
				.authenticate(new UsernamePasswordAuthenticationToken(loginForm.getEmail(), loginForm.getPassword()));
		SecurityContextHolder.getContext().setAuthentication(authentication);

		User user = userRepository.findByEmail(loginForm.getEmail()).orElseThrow();

		String jwtToken = jwtService.generateToken(user);
		String refershToken = jwtService.refershToken(user);

		saveUserToken(user, jwtToken, refershToken);

		Cookie cookie = new Cookie("refersh_token", refershToken);
		cookie.setSecure(true);
		cookie.setHttpOnly(true);
		cookie.setPath("/api/admin/auth/refresh");

		response.addCookie(cookie);

		return AuthenticationResponse.builder()
				.accessToken(jwtToken)
				.userInfo(UserInfoResponse.getUserInfo(user))
				.build();
	}
	
	
}
